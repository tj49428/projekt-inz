"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = void 0;
var fs_1 = __importDefault(require("fs"));
var less_1 = __importDefault(require("less"));
var path_1 = __importDefault(require("path"));
var chokidar_1 = __importDefault(require("chokidar"));
var dateTime = function () {
    var date = new Date();
    var z = function (n) { return (n < 10 ? "0".concat(n) : n); };
    var YYYY = date.getFullYear();
    var MM = date.getMonth() + 1;
    var DD = date.getDate();
    var h = date.getHours();
    var m = date.getMinutes();
    var s = date.getSeconds();
    return "".concat(YYYY, "-").concat(z(MM), "-").concat(z(DD), " ").concat(z(h), ":").concat(z(m), ":").concat(z(s));
};
var ensureDirSync = function (dir) {
    if (!fs_1.default.existsSync(dir)) {
        fs_1.default.mkdirSync(dir, { mode: 493, recursive: true });
    }
};
var watch = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var entryFilename, outputFilename, outputDir, watchOptions, lessOptions, watchCwd, delay, relativeOutputFilename, watchExtensions, compile, mTriggers, build, timerId, schedule, watchDir, shortWatchDir;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                entryFilename = path_1.default.resolve(options.entry);
                outputFilename = path_1.default.resolve(options.output);
                outputDir = path_1.default.dirname(outputFilename);
                watchOptions = options.watchOptions ? __assign({}, options.watchOptions) : {};
                lessOptions = options.lessOptions ? __assign({}, options.lessOptions) : {};
                watchCwd = watchOptions.cwd ? path_1.default.resolve(watchOptions.cwd) : process.cwd();
                delay = typeof options.delay === 'number' && options.delay > 0 ? options.delay : 0;
                watchOptions.cwd = watchCwd;
                watchOptions.ignoreInitial = watchOptions.ignoreInitial === undefined;
                watchOptions.followSymlinks = watchOptions.followSymlinks === undefined;
                watchOptions.disableGlobbing = true;
                lessOptions.filename = lessOptions.filename === undefined ? entryFilename : lessOptions.filename;
                relativeOutputFilename = path_1.default.relative(process.cwd(), outputFilename);
                watchExtensions = [
                    '.less',
                    '.css',
                    '.svg',
                    '.png',
                    '.jpg',
                    '.jpeg',
                    '.gif',
                    '.webp',
                    '.bmp'
                ];
                (_a = options.extraWatchExtensions) === null || _a === void 0 ? void 0 : _a.forEach(function (extension) {
                    var lowercaseExtension = extension.trim().toLowerCase();
                    if (lowercaseExtension) {
                        if (!watchExtensions.includes(lowercaseExtension)) {
                            watchExtensions.push(lowercaseExtension);
                        }
                    }
                });
                compile = function () {
                    return new Promise(function (resolve, reject) {
                        var input = fs_1.default.readFileSync(entryFilename).toString();
                        less_1.default.render(input, lessOptions, function (err, output) {
                            if (err || !output) {
                                reject(err || new Error('output is undefined'));
                            }
                            else {
                                try {
                                    fs_1.default.writeFileSync(outputFilename, output.css);
                                }
                                catch (err) {
                                    reject(err);
                                    return;
                                }
                                resolve(output.imports);
                            }
                        });
                    });
                };
                mTriggers = [];
                build = function () { return __awaiter(void 0, void 0, void 0, function () {
                    var triggers, lockTriggers;
                    return __generator(this, function (_a) {
                        triggers = mTriggers;
                        lockTriggers = [];
                        mTriggers = lockTriggers;
                        return [2 /*return*/, compile()
                                .then(function () {
                                if (lockTriggers === mTriggers) {
                                    if (!options.quiet && !options.build) {
                                        var triggerDescList_1 = [];
                                        triggers
                                            .map(function (_a) {
                                            var event = _a.event, filename = _a.filename;
                                            var triggerDesc = "".concat(event, " ").concat(filename);
                                            if (!triggerDescList_1.includes(triggerDesc)) {
                                                triggerDescList_1.push(triggerDesc);
                                            }
                                        })
                                            .join(', ');
                                        var times = triggers.length > 1 ? " x".concat(triggers.length) : '';
                                        var triggerText = triggerDescList_1.length
                                            ? " (".concat(triggerDescList_1.join(', '), ")").concat(times)
                                            : ' (initial build)';
                                        console.log("[".concat(dateTime(), "] Compiled to ").concat(relativeOutputFilename).concat(triggerText));
                                    }
                                }
                            })
                                .catch(function (err) {
                                if (lockTriggers === mTriggers) {
                                    try {
                                        var line = err.line, column = err.column, message = err.message, filename = err.filename;
                                        if (typeof filename === 'string') {
                                            console.error("[".concat(dateTime(), "] Error: ").concat(message, ". File: ").concat(filename, " (Line ").concat(line, ", Col ").concat(column, ")"));
                                        }
                                        else {
                                            console.error(err);
                                        }
                                    }
                                    catch (e) {
                                        console.error(err);
                                    }
                                }
                            })];
                    });
                }); };
                timerId = null;
                schedule = function (event, filename) {
                    if (event && filename) {
                        mTriggers.push({ event: event, filename: filename });
                    }
                    if (delay) {
                        if (timerId === null) {
                            timerId = setTimeout(function () {
                                timerId = null;
                                build();
                            }, delay);
                        }
                    }
                    else {
                        build();
                    }
                };
                watchDir = path_1.default.resolve(options.watchDir || './');
                if (!options.quiet && !options.build) {
                    shortWatchDir = path_1.default.relative(process.cwd(), watchDir).replace(/\\/, '/') || './';
                    console.log("[".concat(dateTime(), "] Watching ").concat(shortWatchDir));
                }
                ensureDirSync(outputDir);
                if (!watchOptions.ignoreInitial) return [3 /*break*/, 2];
                return [4 /*yield*/, build()];
            case 1:
                _b.sent();
                _b.label = 2;
            case 2:
                if (options.build) {
                    if (!options.quiet) {
                        console.log("[".concat(dateTime(), "] Build successfully (compiled to ").concat(relativeOutputFilename, ")."));
                    }
                    return [2 /*return*/, null];
                }
                return [2 /*return*/, chokidar_1.default.watch(watchDir, watchOptions).on('all', function (event, filename) {
                        if (event === 'unlinkDir') {
                            schedule(event, filename);
                        }
                        else if (event === 'change' || event === 'add' || event === 'unlink') {
                            var lowercaseFilename_1 = filename.toLowerCase();
                            var absoluteFilename = path_1.default.resolve(watchCwd, filename);
                            if (absoluteFilename !== outputFilename) {
                                if (watchExtensions.some(function (extension) { return lowercaseFilename_1.endsWith(extension); })) {
                                    schedule(event, filename);
                                }
                            }
                        }
                    })];
        }
    });
}); };
exports.watch = watch;
