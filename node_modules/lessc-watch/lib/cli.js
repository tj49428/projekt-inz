"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var watch_1 = require("./watch");
var resolverArgs = function (argv, allowedArgs) {
    var args = {};
    var rest = __spreadArray([], argv, true);
    var unknownArgs = [];
    var ignoredValues = [];
    var setArg = function (key, value) {
        args[key] = value;
        if (allowedArgs) {
            if (!allowedArgs.includes(key)) {
                unknownArgs.push(key);
            }
        }
    };
    while (rest.length > 0) {
        var option = rest.shift();
        if (option) {
            if (option.startsWith('--') || option.startsWith('-')) {
                if (option.includes('=')) {
                    var _a = option.split('='), key = _a[0], values = _a.slice(1);
                    setArg(key, values.join('='));
                }
                else {
                    var value = rest.shift();
                    if (value) {
                        if (value.startsWith('--') || value.startsWith('-')) {
                            rest.unshift(value);
                            setArg(option, '');
                        }
                        else {
                            setArg(option, value);
                        }
                    }
                    else {
                        setArg(option, '');
                    }
                }
            }
            else {
                ignoredValues.push(option);
            }
        }
    }
    return { args: args, unknownArgs: unknownArgs, ignoredValues: ignoredValues };
};
var allowedArgs = [
    '-h',
    '--help',
    '--watch-dir',
    '-d',
    '--rewrite-urls',
    '-ru',
    '--ext',
    '--build',
    '--delay',
    '--quiet',
    '-q',
    '--help',
    '-h'
];
var _a = resolverArgs(process.argv.slice(2), allowedArgs), args = _a.args, unknownArgs = _a.unknownArgs, ignoredValues = _a.ignoredValues;
var hasArg = function (key) { return typeof args[key] === 'string'; };
if (unknownArgs.length) {
    console.warn("Warning: Unknown argument".concat(unknownArgs.length > 1 ? 's' : '', " ").concat(unknownArgs.join(', ')));
}
if (ignoredValues.length > 2) {
    console.warn("Warning: Ignored value".concat(ignoredValues.length > 1 ? 's' : '', " ").concat(ignoredValues
        .slice(2)
        .join(', ')));
}
var help = [
    'COMMAND',
    '  lessc-watch <entry_file> <output_file> [options ...]',
    '',
    'EXAMPLE',
    '  lessc-watch src/index.less dist/bundle.css -d=src -ru=all',
    '',
    'OPTIONS',
    '  --watch-dir, -d      The directory to watch (default to "./").',
    '',
    '  --rewrite-urls, -ru  The option of less "rewrite-urls".',
    '',
    '  --ext                The extra file extensions to watch (separated',
    '                       by comma). The base extensions are .less, .css,',
    '                       .svg, .png, .jpg, .jpeg, .gif, .webp, .bmp.',
    '                       You can use this option to add more.',
    '',
    '  --build              Build less to css without watching for the',
    '                       file changes.',
    '',
    '  --delay              The milliseconds to delay before building',
    '                       (default to 0).',
    '',
    '  --quiet, -q          Disable all logs (not including error message).',
    '',
    '  --help, -h           Print this message.'
].join('\n');
var printHelp = function () {
    console.log(help);
};
if (hasArg('-h') || hasArg('--help')) {
    printHelp();
    process.exit(0);
}
var options = {
    entry: ignoredValues[0] || '',
    output: ignoredValues[1] || ''
};
if (!options.entry) {
    console.error("ERROR: No entry file specified.");
    console.log('');
    printHelp();
    process.exit(1);
}
if (!options.output) {
    console.error("ERROR: No output file specified.");
    console.log('');
    printHelp();
    process.exit(1);
}
var watchDir = args['--watch-dir'] || args['-d'];
if (watchDir) {
    options.watchDir = watchDir;
}
var rewriteUrls = args['--rewrite-urls'] || args['-ru'];
if (rewriteUrls) {
    options.lessOptions = options.lessOptions || {};
    options.lessOptions.rewriteUrls = rewriteUrls;
}
var ext = args['--ext'];
if (ext) {
    options.extraWatchExtensions = ext.split(/\s*,\s*/);
}
if (hasArg('--build')) {
    options.build = true;
}
var delay = args['--delay'];
if (delay) {
    var delayMs = +delay;
    if (!isNaN(delayMs)) {
        options.delay = delayMs;
    }
}
if (hasArg('--quiet') || hasArg('-q')) {
    options.quiet = true;
}
(0, watch_1.watch)(options);
